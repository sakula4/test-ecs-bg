name: Deploy Infrastructure

on:
  push:
    branches:
      - main



env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    TF_ACTION_WORKING_DIR: '.'
    AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    TF_VAR_traffic_distribution: "blue-90"
    NEW_DEPLOYMENT: "blue"
    AWS_REGION: "us-east-1"

jobs:
  tf_fmt:
    name: Deploy Site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: get-ssh-private-key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Get value from Parameter store
        uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.2
        with:
          ssm-path: /test/bg/CURRENT_DEPLOYMENT

      - name: test if key exists
        run: echo ${{ env.CURRENT_DEPLOYMENT }}

      - name: test values before update
        run: echo $GITHUB_ENV

      - name: update new deployment value based on current deployment (blue <-> green)
        run: |
          if [ ${{ env.CURRENT_DEPLOYMENT }} = 'blue' ]; then
            echo "NEW_DEPLOYMENT=green" >> $GITHUB_ENV
          else
            echo "NEW_DEPLOYMENT=blue" >> $GITHUB_ENV
          fi


      - name: install tfcmt
        run: |
          curl -Lo /tmp/tfcmt_linux_amd64.tar.gz https://github.com/suzuki-shunsuke/tfcmt/releases/download/v3.2.5/tfcmt_linux_amd64.tar.gz
        shell: bash

      - name: execute permissions to tfcmt
        run: |
          cd /tmp
          tar -xvzf tfcmt_linux_amd64.tar.gz
          mv tfcmt /usr/local/bin/tfcmt
          chmod +x /usr/local/bin/tfcmt
        shell: bash

      - name: test values
        shell: bash
        run: | 
            echo "files in workspace"
            ls -al 
            echo $GITHUB_WORKSPACE
            ls -al $GITHUB_WORKSPACE
            cat $GITHUB_WORKSPACE/tfcmt.yaml
            
            

#       - name: test values after update
#         run: echo $GITHUB_ENV

#       - name: Terraform Version
#         run: terraform version

#       - name: Terraform Init
#         run: terraform init

#       - name: Terraform Validate
#         run: terraform validate

#       - name: Terraform Plan
#         run: terraform plan

#       - name: Terraform apply and route 10% traffic
#         run: sleep 90 && terraform apply --auto-approve --var "traffic_distribution=${{ env.CURRENT_DEPLOYMENT }}-90"

#       - name: Invoke Lambda Function to check health for new deployment
#         id: healthCheckLambda1
#         uses: gagoar/invoke-aws-lambda@master
#         with:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           FunctionName: canary-deployment-StepFunction-CheckHealthFunction-W1OrpwQMHhnJ
#           Payload: '{ "target": "arn:aws:elasticloadbalancing:us-east-1:076699035263:targetgroup/canar-Targe-1ETRJGYLXCW98/b0e51ebe387cd0fe" }' 
#       - name: Terraform apploy with 50% traffic to new target
#         if: contains(fromJSON(steps.healthCheckLambda1.outputs.response).Payload, 'healthy')
#         run: sleep 90 && terraform apply --auto-approve --var "traffic_distribution=split"
      
#       - name: Health check after splitting the traffic
#         id: healthCheckLambda2
#         uses: gagoar/invoke-aws-lambda@master
#         with:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           FunctionName: canary-deployment-StepFunction-CheckHealthFunction-W1OrpwQMHhnJ
#           Payload: '{ "target": "arn:aws:elasticloadbalancing:us-east-1:076699035263:targetgroup/canar-Targe-1ETRJGYLXCW98/b0e51ebe387cd0fe" }' 
#       - name: Terraform apploy with 90% traffic to new target
#         if: contains(fromJSON(steps.healthCheckLambda2.outputs.response).Payload, 'healthy')
#         run: sleep 90 && terraform apply --auto-approve --var "traffic_distribution=${{ env.NEW_DEPLOYMENT }}-90"        

#       - name: Final health check after routing 90% traffic
#         id: healthCheckLambda3
#         uses: gagoar/invoke-aws-lambda@master
#         with:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           FunctionName: canary-deployment-StepFunction-CheckHealthFunction-W1OrpwQMHhnJ
#           Payload: '{ "target": "arn:aws:elasticloadbalancing:us-east-1:076699035263:targetgroup/canar-Targe-1ETRJGYLXCW98/b0e51ebe387cd0fe" }' 
#       - name: Route all traffic to new environment
#         if: contains(fromJSON(steps.healthCheckLambda3.outputs.response).Payload, 'healthy')
#         run: sleep 90 && terraform apply --auto-approve --var "traffic_distribution=${{ env.NEW_DEPLOYMENT }}"        

#       - name: Update current deployment value.
#         uses: dwardu89/aws-ssm-parameter-store@v2.0.0
#         with:
#           ssm-path: "/test/bg/CURRENT_DEPLOYMENT"
#           ssm-value: ${{ env.NEW_DEPLOYMENT }}
#           ssm-value-overwrite: true
#           aws-region: "us-east-1"
#           ssm-value-type: "String"        
        
